{"ast":null,"code":"var _jsxFileName = \"/home/donnachin/Desktop/Git/Cloned/GroupProj/client/src/Components/ImagePuzzle/Puzzle4/DragNDrop4.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\"; //useRef it stays constant between re renders\n\nimport Piece1 from \"../PuzzleImg/puzzle-1.png\";\nimport Piece2 from \"../PuzzleImg/puzzle-2.png\";\nimport Piece3 from \"../PuzzleImg/puzzle-3.png\";\nimport Piece4 from \"../PuzzleImg/puzzle-4.png\";\nimport Piece5 from \"../PuzzleImg/puzzle-5.png\";\nimport Cactus from \"../PuzzleImg/the-cactus.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DragNDrop1({\n  data\n}) {\n  _s();\n\n  const [list, setList] = useState(data);\n  const [dragging, setDragging] = useState(false);\n  const dragItem = useRef();\n  const dragNode = useRef();\n\n  const handleDragStart = (e, params) => {\n    console.log(\"drag starting...\", params);\n    dragItem.current = params; //dragItem's coordinate\n\n    dragNode.current = e.target; //the node we are currently playing with\n\n    dragNode.current.addEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n    // when we start dragging it will keep the original style (white), otherwise it will drag black-ish\n\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnter = (e, params) => {\n    console.log(\"Entering drag ...\", params);\n    const currentItem = dragItem.current; //if the coordinates of the current node are not the same as the current node is at the moment, fire the log\n\n    if (e.target !== dragNode.current) {\n      console.log(\"TARGET IS NOT THE SAME!\");\n      setList(oldList => {\n        let newList = JSON.parse(JSON.stringify(oldList)); // here we are making a clone of oldList (that is an object) so we can manipulated\n\n        newList[params.grpI].items.splice(params.itemI, 0, newList[currentItem.grpI].items.splice(currentItem.itemI, 1)[0]);\n        dragItem.current = params;\n        return newList;\n      });\n    }\n  };\n\n  const handleDragEnd = () => {\n    console.log(\"Ending drag...\");\n    setDragging(false);\n    dragNode.current.removeEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n\n    dragItem.current = null;\n    dragNode.current = null;\n  };\n\n  const getStyles = params => {\n    const currentItem = dragItem.current;\n\n    if (currentItem.grpI === params.grpI && currentItem.itemI === params.itemI) {\n      return \"current dnd-item\";\n    }\n\n    return \"dnd-item\";\n  };\n\n  const isSolved = () => {\n    const startPiecesArray = [\"1\", \"2\", \"3\", \"4\", \"5\"]; //original array to be compared to\n\n    const rightPiecesOrder = list[1].items; //it starts as an empty array and when the puzzle is done we have to compare it to the original array\n\n    console.log(startPiecesArray, rightPiecesOrder);\n\n    for (let i = 0; i < startPiecesArray.length; i++) {\n      if (startPiecesArray[i] === rightPiecesOrder[i]) {\n        //if both arrays have the same elements\n        console.log(\"You did it!\");\n      } else {\n        console.log(\"Try again\");\n      }\n    }\n  };\n\n  const handleIsSolvedClick = () => {\n    isSolved();\n  };\n\n  const handleTryAgainClick = () => {\n    const shuffledPieces = [...data[0].items].sort(() => 0.5 - Math.random());\n    setList([{ ...data[0],\n      items: shuffledPieces\n    }, data[1]]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"drag-n-drop\",\n    children: [list.map((grp, grpI) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dnd-group\",\n      onDragEnter: dragging && !grp.items.length ? e => handleDragEnter(e, {\n        grpI,\n        itemI: 0\n      }) : null,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-title\",\n        children: grp.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), grp.items.map((item, itemI) => /*#__PURE__*/_jsxDEV(\"div\", {\n        draggable: true,\n        onDragStart: e => {\n          handleDragStart(e, {\n            grpI,\n            itemI\n          }); //here we are passing the coordinates by index to a specific item\n        },\n        onDragEnter: dragging ? e => handleDragEnter(e, {\n          grpI,\n          itemI\n        }) : null,\n        className: dragging ? getStyles({\n          grpI,\n          itemI\n        }) : \"dnd-item\",\n        children: [item === \"1\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Piece1,\n          alt: \"piece 1 of a puzzle\",\n          className: \"puzzle-piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this), item === \"2\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Piece2,\n          alt: \"piece 2 of a puzzle\",\n          className: \"puzzle-piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this), item === \"3\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Piece3,\n          alt: \"piece 3 of a puzzle\",\n          className: \"puzzle-piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this), item === \"4\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Piece4,\n          alt: \"piece 4 of a puzzle\",\n          className: \"puzzle-piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }, this), item === \"5\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Piece5,\n          alt: \"piece 5 of a puzzle\",\n          className: \"puzzle-piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this)]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this))]\n    }, grp.title, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cactus-img\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: Cactus,\n        alt: \"cactus illustration\",\n        className: \"whole-cactus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"puzzle-button\",\n        onClick: () => handleTryAgainClick(),\n        className: \"lg-2 col background-warning\",\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"puzzle-button\",\n        onClick: () => handleIsSolvedClick(),\n        className: \"lg-2 col background-warning\",\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DragNDrop1, \"4hFDioJyiC0eLqqFfNeS+/qcApo=\");\n\n_c = DragNDrop1;\nexport default DragNDrop1;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragNDrop1\");","map":{"version":3,"sources":["/home/donnachin/Desktop/Git/Cloned/GroupProj/client/src/Components/ImagePuzzle/Puzzle4/DragNDrop4.js"],"names":["React","useState","useRef","Piece1","Piece2","Piece3","Piece4","Piece5","Cactus","DragNDrop1","data","list","setList","dragging","setDragging","dragItem","dragNode","handleDragStart","e","params","console","log","current","target","addEventListener","handleDragEnd","setTimeout","handleDragEnter","currentItem","oldList","newList","JSON","parse","stringify","grpI","items","splice","itemI","removeEventListener","getStyles","isSolved","startPiecesArray","rightPiecesOrder","i","length","handleIsSolvedClick","handleTryAgainClick","shuffledPieces","sort","Math","random","map","grp","title","item"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\"; //useRef it stays constant between re renders\nimport Piece1 from \"../PuzzleImg/puzzle-1.png\"\nimport Piece2 from \"../PuzzleImg/puzzle-2.png\";\nimport Piece3 from \"../PuzzleImg/puzzle-3.png\";\nimport Piece4 from \"../PuzzleImg/puzzle-4.png\";\nimport Piece5 from \"../PuzzleImg/puzzle-5.png\";\nimport Cactus from \"../PuzzleImg/the-cactus.png\";\n\nfunction DragNDrop1({ data }) {\n  const [list, setList] = useState(data);\n  const [dragging, setDragging] = useState(false);\n  const dragItem = useRef();\n  const dragNode = useRef();\n\n  const handleDragStart = (e, params) => {\n    console.log(\"drag starting...\", params);\n    dragItem.current = params; //dragItem's coordinate\n    dragNode.current = e.target; //the node we are currently playing with\n    dragNode.current.addEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n    // when we start dragging it will keep the original style (white), otherwise it will drag black-ish\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnter = (e, params) => {\n    console.log(\"Entering drag ...\", params);\n    const currentItem = dragItem.current;\n    //if the coordinates of the current node are not the same as the current node is at the moment, fire the log\n    if (e.target !== dragNode.current) {\n      console.log(\"TARGET IS NOT THE SAME!\");\n      setList((oldList) => {\n        let newList = JSON.parse(JSON.stringify(oldList)); // here we are making a clone of oldList (that is an object) so we can manipulated\n        newList[params.grpI].items.splice(\n          params.itemI,\n          0,\n          newList[currentItem.grpI].items.splice(currentItem.itemI, 1)[0]\n        );\n        dragItem.current = params;\n        return newList;\n      });\n    }\n  };\n\n  const handleDragEnd = () => {\n    console.log(\"Ending drag...\");\n    setDragging(false);\n    dragNode.current.removeEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n    dragItem.current = null;\n    dragNode.current = null;\n  };\n\n  const getStyles = (params) => {\n    const currentItem = dragItem.current;\n    if (\n      currentItem.grpI === params.grpI &&\n      currentItem.itemI === params.itemI\n    ) {\n      return \"current dnd-item\";\n    }\n    return \"dnd-item\";\n  };\n\n  const isSolved = () => {\n    const startPiecesArray = [\"1\", \"2\", \"3\", \"4\", \"5\"]; //original array to be compared to\n    const rightPiecesOrder = list[1].items; //it starts as an empty array and when the puzzle is done we have to compare it to the original array\n\n    console.log(startPiecesArray, rightPiecesOrder);\n\n    for (let i = 0; i < startPiecesArray.length; i++) {\n      if (startPiecesArray[i] === rightPiecesOrder[i]) {\n        //if both arrays have the same elements\n        console.log(\"You did it!\");\n      } else {\n        console.log(\"Try again\");\n      }\n    }\n  };\n\n  const handleIsSolvedClick = () => {\n    isSolved();\n  };\n\n  const handleTryAgainClick = () => {\n    const shuffledPieces = [...data[0].items].sort(() => 0.5 - Math.random());\n    setList([{ ...data[0], items: shuffledPieces }, data[1]]);\n  };\n\n  return (\n    <div className=\"drag-n-drop\">\n      {/* here we iterate through groups*/}\n      {list.map((grp, grpI) => (\n        <div\n          key={grp.title}\n          className=\"dnd-group\"\n          onDragEnter={\n            dragging && !grp.items.length\n              ? (e) => handleDragEnter(e, { grpI, itemI: 0 })\n              : null\n          }\n        >\n          <div className=\"group-title\">{grp.title}</div>\n          {/* here we iterate through items*/}\n          {grp.items.map((item, itemI) => (\n            <div\n              draggable\n              onDragStart={(e) => {\n                handleDragStart(e, { grpI, itemI }); //here we are passing the coordinates by index to a specific item\n              }}\n              onDragEnter={\n                dragging ? (e) => handleDragEnter(e, { grpI, itemI }) : null\n              }\n              key={item}\n              className={dragging ? getStyles({ grpI, itemI }) : \"dnd-item\"}\n            >\n              {item === \"1\" && (\n                <img\n                  src={Piece1}\n                  alt=\"piece 1 of a puzzle\"\n                  className=\"puzzle-piece\"\n                />\n              )}\n              {item === \"2\" && (\n                <img\n                  src={Piece2}\n                  alt=\"piece 2 of a puzzle\"\n                  className=\"puzzle-piece\"\n                />\n              )}\n              {item === \"3\" && (\n                <img\n                  src={Piece3}\n                  alt=\"piece 3 of a puzzle\"\n                  className=\"puzzle-piece\"\n                />\n              )}\n              {item === \"4\" && (\n                <img\n                  src={Piece4}\n                  alt=\"piece 4 of a puzzle\"\n                  className=\"puzzle-piece\"\n                />\n              )}\n              {item === \"5\" && (\n                <img\n                  src={Piece5}\n                  alt=\"piece 5 of a puzzle\"\n                  className=\"puzzle-piece\"\n                />\n              )}\n            </div>\n          ))}\n        </div>\n      ))}\n      <div className=\"cactus-img\">\n        <img src={Cactus} alt=\"cactus illustration\" className=\"whole-cactus\" />\n      </div>\n      <div className=\"buttons\">\n        <button id=\"puzzle-button\" onClick={() => handleTryAgainClick()} className=\"lg-2 col background-warning\">Try Again</button>\n        <button id=\"puzzle-button\" onClick={() => handleIsSolvedClick()}className=\"lg-2 col background-warning\">Done</button>\n      </div>\n    </div>\n  );\n}\n\nexport default DragNDrop1;"]},"metadata":{},"sourceType":"module"}