{"ast":null,"code":"var _jsxFileName = \"/home/donnachin/Desktop/Git/Cloned/GroupProj/client/src/Components/Categories/Categories1/Categories1DnD.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\"; //useRef it stays constant between re renders\n\nimport Cow from \"../CatImg/cow.jpg\";\nimport Duck from \"../CatImg/duck.jpg\";\nimport Gallo from \"../CatImg/gallo.jpg\";\nimport Horse from \"../CatImg/horse.jpg\";\nimport Piggy from \"../CatImg/piggy.jpg\";\nimport Tree from \"../CatImg/tree.jpg\";\nimport Books from \"../CatImg/books.jpg\";\nimport House from \"../CatImg/house.jpg\";\nimport \"./Categories1.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Categories({\n  categoriesData\n}) {\n  _s();\n\n  const [list, setList] = useState(categoriesData);\n  const [dragging, setDragging] = useState(false);\n  const dragItem = useRef();\n  const dragNode = useRef();\n\n  const handleDragStart = (e, params) => {\n    console.log(\"drag starting...\", params);\n    dragItem.current = params; //dragItem's coordinate\n\n    dragNode.current = e.target; //the node we are currently playing with\n\n    dragNode.current.addEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n    // when we start dragging it will keep the original style (white), otherwise it will drag black-ish\n\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnter = (e, params) => {\n    console.log(\"Entering drag ...\", params);\n    const rigthPiecesOrder = list[0].items;\n    const currentItem = dragItem.current; //if the coordinates of the current node are not the same as the current node is at the moment, fire the log\n\n    if (e.target !== dragNode.current) {\n      console.log(\"TARGET IS NOT THE SAME!\"); //this line restricts the amount of cards in the first column(index 0) to only 5\n      //and will allow cards to be moved to the second column (index 1)\n\n      if (rigthPiecesOrder.length >= 5 && currentItem.grpI === 1) {\n        return;\n      }\n\n      setList(oldList => {\n        let newList = JSON.parse(JSON.stringify(oldList)); // here we are making a clone of oldList (that is an object) so we can manipulated\n\n        newList[params.grpI].items.splice(params.itemI, 0, newList[currentItem.grpI].items.splice(currentItem.itemI, 1)[0]);\n        dragItem.current = params;\n        return newList;\n      });\n    } // when we start dragging it will keep the original style (white), otherwise it will drag black-ish\n\n\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnd = () => {\n    console.log(\"Ending drag...\");\n    setDragging(false);\n    dragNode.current.removeEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n\n    dragItem.current = null;\n    dragNode.current = null;\n  };\n\n  const getStyles = params => {\n    const currentItem = dragItem.current;\n\n    if (currentItem.grpI === params.grpI && currentItem.itemI === params.itemI) {\n      return \"current dnd-item\";\n    }\n\n    return \"dnd-item\";\n  };\n\n  const isSolved = () => {\n    const rigthPiecesOrder = list[0].items;\n\n    for (let i = 0; i < rigthPiecesOrder.length; i++) {\n      if (rigthPiecesOrder.includes(\"6\") && rigthPiecesOrder.includes(\"9\")) {\n        console.log(\"You did it!\");\n      } else {\n        console.log(\"Oops! Try again!\");\n      }\n    }\n  };\n\n  const handleIsSolvedClick = () => {\n    isSolved();\n  };\n\n  const handleTryAgainClick = () => {\n    const shuffledPieces = [...categoriesData[1].items].sort(() => 0.5 - Math.random());\n    setList([categoriesData[0], { ...categoriesData[1],\n      items: shuffledPieces\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"categories-drag-n-drop\",\n    children: [list.map((grp, grpI) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"categories-dnd-group\",\n      onDragEnter: dragging && !grp.items.length ? e => handleDragEnter(e, {\n        grpI,\n        itemI: 0\n      }) : null,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-title\",\n        children: grp.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), grp.items.map((item, itemI) => /*#__PURE__*/_jsxDEV(\"div\", {\n        draggable: true,\n        onDragStart: e => {\n          handleDragStart(e, {\n            grpI,\n            itemI\n          }); //here we are passing the coordinates by index to a specific item\n        },\n        onDragEnter: dragging ? e => handleDragEnter(e, {\n          grpI,\n          itemI\n        }) : null,\n        className: dragging ? getStyles({\n          grpI,\n          itemI\n        }) : \"dnd-item\",\n        children: [item === \"1\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Gallo,\n          alt: \"colorful rooster\",\n          className: \"category-card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this), item === \"2\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Cow,\n          alt: \"vector cow\",\n          className: \"category-card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this), item === \"3\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Duck,\n          alt: \"walking duck\",\n          className: \"category-card  duck-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }, this), item === \"6\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Piggy,\n          alt: \"tall horse\",\n          className: \"category-card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }, this), item === \"7\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Tree,\n          alt: \"tall horse\",\n          className: \"category-card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }, this), item === \"8\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Books,\n          alt: \"tall horse\",\n          className: \"category-card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 17\n        }, this), item === \"9\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Horse,\n          alt: \"tall horse\",\n          className: \"category-card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }, this), item === \"10\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: House,\n          alt: \"tall horse\",\n          className: \"category-card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this)]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this))]\n    }, grp.title, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTryAgainClick(),\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleIsSolvedClick(),\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Categories, \"g+OZGUTdewacti918eG0Uo7wKE4=\");\n\n_c = Categories;\nexport default Categories;\n\nvar _c;\n\n$RefreshReg$(_c, \"Categories\");","map":{"version":3,"sources":["/home/donnachin/Desktop/Git/Cloned/GroupProj/client/src/Components/Categories/Categories1/Categories1DnD.js"],"names":["React","useState","useRef","Cow","Duck","Gallo","Horse","Piggy","Tree","Books","House","Categories","categoriesData","list","setList","dragging","setDragging","dragItem","dragNode","handleDragStart","e","params","console","log","current","target","addEventListener","handleDragEnd","setTimeout","handleDragEnter","rigthPiecesOrder","items","currentItem","length","grpI","oldList","newList","JSON","parse","stringify","splice","itemI","removeEventListener","getStyles","isSolved","i","includes","handleIsSolvedClick","handleTryAgainClick","shuffledPieces","sort","Math","random","map","grp","title","item"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\"; //useRef it stays constant between re renders\nimport Cow from \"../CatImg/cow.jpg\";\nimport Duck from \"../CatImg/duck.jpg\";\nimport Gallo from \"../CatImg/gallo.jpg\";\nimport Horse from \"../CatImg/horse.jpg\";\nimport Piggy from \"../CatImg/piggy.jpg\";\nimport Tree from \"../CatImg/tree.jpg\";\nimport Books from \"../CatImg/books.jpg\";\nimport House from \"../CatImg/house.jpg\";\nimport \"./Categories1.css\";\n\nfunction Categories({ categoriesData }) {\n  const [list, setList] = useState(categoriesData);\n  const [dragging, setDragging] = useState(false);\n  const dragItem = useRef();\n  const dragNode = useRef();\n\n  const handleDragStart = (e, params) => {\n    console.log(\"drag starting...\", params);\n    dragItem.current = params; //dragItem's coordinate\n    dragNode.current = e.target; //the node we are currently playing with\n    dragNode.current.addEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n    // when we start dragging it will keep the original style (white), otherwise it will drag black-ish\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnter = (e, params) => {\n    console.log(\"Entering drag ...\", params);\n    const rigthPiecesOrder = list[0].items;\n    const currentItem = dragItem.current;\n    //if the coordinates of the current node are not the same as the current node is at the moment, fire the log\n    if (e.target !== dragNode.current) {\n      console.log(\"TARGET IS NOT THE SAME!\");\n      //this line restricts the amount of cards in the first column(index 0) to only 5\n      //and will allow cards to be moved to the second column (index 1)\n      if (rigthPiecesOrder.length >= 5 && currentItem.grpI === 1) {\n        return;\n      }\n      setList((oldList) => {\n        let newList = JSON.parse(JSON.stringify(oldList)); // here we are making a clone of oldList (that is an object) so we can manipulated\n        newList[params.grpI].items.splice(\n          params.itemI,\n          0,\n          newList[currentItem.grpI].items.splice(currentItem.itemI, 1)[0]\n        );\n        dragItem.current = params;\n        return newList;\n      });\n    }\n    // when we start dragging it will keep the original style (white), otherwise it will drag black-ish\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnd = () => {\n    console.log(\"Ending drag...\");\n    setDragging(false);\n    dragNode.current.removeEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n    dragItem.current = null;\n    dragNode.current = null;\n  };\n\n  const getStyles = (params) => {\n    const currentItem = dragItem.current;\n    if (\n      currentItem.grpI === params.grpI &&\n      currentItem.itemI === params.itemI\n    ) {\n      return \"current dnd-item\";\n    }\n    return \"dnd-item\";\n  };\n\n  const isSolved = () => {\n    const rigthPiecesOrder = list[0].items;\n    for (let i = 0; i < rigthPiecesOrder.length; i++) {\n      if (rigthPiecesOrder.includes(\"6\") && rigthPiecesOrder.includes(\"9\")) {\n        console.log(\"You did it!\");\n      } else {\n        console.log(\"Oops! Try again!\");\n      }\n    }\n  };\n\n  const handleIsSolvedClick = () => {\n    isSolved();\n  };\n\n  const handleTryAgainClick = () => {\n    const shuffledPieces = [...categoriesData[1].items].sort(\n      () => 0.5 - Math.random()\n    );\n    setList([\n      categoriesData[0],\n      { ...categoriesData[1], items: shuffledPieces },\n    ]);\n  };\n\n  return (\n    <div className=\"categories-drag-n-drop\">\n      {/* here we iterate through groups*/}\n      {list.map((grp, grpI) => (\n        <div\n          key={grp.title}\n          className=\"categories-dnd-group\"\n          onDragEnter={\n            dragging && !grp.items.length\n              ? (e) => handleDragEnter(e, { grpI, itemI: 0 })\n              : null\n          }\n        >\n          <div className=\"group-title\">{grp.title}</div>\n          {/* here we iterate through items*/}\n          {grp.items.map((item, itemI) => (\n            <div\n              draggable\n              onDragStart={(e) => {\n                handleDragStart(e, { grpI, itemI }); //here we are passing the coordinates by index to a specific item\n              }}\n              onDragEnter={\n                dragging ? (e) => handleDragEnter(e, { grpI, itemI }) : null\n              }\n              key={item}\n              className={dragging ? getStyles({ grpI, itemI }) : \"dnd-item\"}\n            >\n              {item === \"1\" && (\n                <img\n                  src={Gallo}\n                  alt=\"colorful rooster\"\n                  className=\"category-card\"\n                />\n              )}\n              {item === \"2\" && (\n                <img src={Cow} alt=\"vector cow\" className=\"category-card\" />\n              )}\n              {item === \"3\" && (\n                <img\n                  src={Duck}\n                  alt=\"walking duck\"\n                  className=\"category-card  duck-img\"\n                />\n              )}\n              {item === \"6\" && (\n                <img src={Piggy} alt=\"tall horse\" className=\"category-card\" />\n              )}\n\n              {item === \"7\" && (\n                <img src={Tree} alt=\"tall horse\" className=\"category-card\" />\n              )}\n              {item === \"8\" && (\n                <img src={Books} alt=\"tall horse\" className=\"category-card\" />\n              )}\n              {item === \"9\" && (\n                <img src={Horse} alt=\"tall horse\" className=\"category-card\" />\n              )}\n              {item === \"10\" && (\n                <img src={House} alt=\"tall horse\" className=\"category-card\" />\n              )}\n            </div>\n          ))}\n        </div>\n      ))}\n      <div className=\"buttons\">\n        <button onClick={() => handleTryAgainClick()}>Try Again</button>\n        <button onClick={() => handleIsSolvedClick()}>Done</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Categories;\n"]},"metadata":{},"sourceType":"module"}