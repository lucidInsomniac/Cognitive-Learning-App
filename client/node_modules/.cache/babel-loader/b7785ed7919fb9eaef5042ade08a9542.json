{"ast":null,"code":"var _jsxFileName = \"/home/donnachin/Desktop/Git/Cloned/GroupProj/client/src/Components/Situations/Situations1/Situations1DnD.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\"; //useRef it stays constant between re renders\n\nimport HawaiiOne from \"../SituationsImg/hawaii-1.jpg\";\nimport HawaiiTwo from \"../SituationsImg/hawaii-2.jpg\";\nimport VeggieOne from \"../SituationsImg/veggies-1.jpg\";\nimport VeggieTwo from \"../SituationsImg/veggies-2.jpg\";\nimport ShrimpOne from \"../SituationsImg/shrimp-1.jpg\";\nimport ShrimpTwo from \"../SituationsImg/shrimp-2.jpg\";\nimport BlackOlivesOne from \"../SituationsImg/olives-1.jpg\";\nimport BlackOlivesTwo from \"../SituationsImg/olives-2.jpg\";\nimport './Situations1.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Situations1DnD({\n  situationsData\n}) {\n  _s();\n\n  const [list, setList] = useState(situationsData);\n  const [dragging, setDragging] = useState(false);\n  const dragItem = useRef(); //useRef() stays constant between re renders\n\n  const dragNode = useRef();\n\n  const handleDragStart = (e, params) => {\n    console.log(\"drag starting...\", params);\n    dragItem.current = params; //dragItem's coordinate\n\n    dragNode.current = e.target; //the node we are currently playing with\n\n    dragNode.current.addEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n    // when we start dragging it will keep the original style (white), otherwise it will drag black-ish\n\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnter = (e, params) => {\n    console.log(\"Entering drag ...\", params); // const firstHalfPizzaArray = list[0].items;\n\n    const currentItem = dragItem.current;\n    console.log(currentItem, dragNode);\n\n    if (currentItem.grpI !== params.grpI) {\n      return;\n    } //if the coordinates of the current node are not the same as the current node is at the moment, fire the log\n\n\n    if (e.target !== dragNode.current) {\n      console.log(\"TARGET IS NOT THE SAME!\");\n      setList(oldList => {\n        let newList = JSON.parse(JSON.stringify(oldList)); // here we are making a clone of oldList (that is an object) so we can manipulated\n\n        newList[params.grpI].items.splice(params.itemI, 0, newList[currentItem.grpI].items.splice(currentItem.itemI, 1)[0]);\n        dragItem.current = params;\n        return newList;\n      });\n    } // when we start dragging it will keep the original style (white), otherwise it will drag black-ish\n\n\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnd = () => {\n    console.log(\"Ending drag...\");\n    setDragging(false);\n    dragNode.current.removeEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n\n    dragItem.current = null;\n    dragNode.current = null;\n  };\n\n  const getStyles = params => {\n    const currentItem = dragItem.current;\n\n    if (currentItem.grpI === params.grpI && currentItem.itemI === params.itemI) {\n      return \"current dnd-item\";\n    }\n\n    return \"dnd-item\";\n  };\n\n  const isSolved = () => {\n    const firstHalfPizzaArray = list[0].items;\n    const secondHalfPizzaArray = list[1].items;\n    let match = true;\n    const matchingIndexes = [];\n\n    for (let i = 0; i < firstHalfPizzaArray.length; i++) {\n      if (firstHalfPizzaArray[i][0] !== secondHalfPizzaArray[i][0]) {\n        match = false;\n      } else {\n        matchingIndexes.push(i);\n      }\n    }\n\n    console.log(`You've got ${matchingIndexes.length} out of 4 correct!`);\n  };\n\n  const handleIsSolvedClick = () => {\n    isSolved();\n  };\n\n  const handleTryAgainClick = () => {\n    const shuffledPieces = [...situationsData[1].items].sort(() => 0.5 - Math.random());\n    setList([situationsData[0], { ...situationsData[1],\n      items: shuffledPieces\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SituationsDnD\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"situations-drag-n-drop\",\n      children: [list.map((grp, grpI) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"situations-dnd-group\",\n        onDragEnter: dragging && !grp.items.length ? e => handleDragEnter(e, {\n          grpI,\n          itemI: 0\n        }) : null,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-title\",\n          children: grp.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), grp.items.map((item, itemI) => /*#__PURE__*/_jsxDEV(\"div\", {\n          draggable: true,\n          onDragStart: e => {\n            handleDragStart(e, {\n              grpI,\n              itemI\n            }); //here we are passing the coordinates by index to a specific item\n          },\n          onDragEnter: dragging ? e => handleDragEnter(e, {\n            grpI,\n            itemI\n          }) : null,\n          className: dragging ? getStyles({\n            grpI,\n            itemI\n          }) : \"dnd-item\",\n          children: [item === \"1a\" && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: HawaiiOne,\n            alt: \"hawaiian pizza\",\n            className: \" group-one category-card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 37\n          }, this), item === \"2a\" && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: VeggieOne,\n            alt: \"veggie pizza\",\n            className: \" group-one category-card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this), item === \"3a\" && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: ShrimpOne,\n            alt: \"shrimp pizza\",\n            className: \" group-one category-card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 29\n          }, this), item === \"4a\" && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: BlackOlivesOne,\n            alt: \"black olives pizza\",\n            className: \"group-one category-card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 29\n          }, this), item === \"1b\" && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: HawaiiTwo,\n            alt: \"hawaiian pizza\",\n            className: \"group-two category-card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 29\n          }, this), item === \"2b\" && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: VeggieTwo,\n            alt: \"veggie pizza\",\n            className: \"group-two category-card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this), item === \"3b\" && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: ShrimpTwo,\n            alt: \"shrimp pizza\",\n            className: \"group-two category-card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 29\n          }, this), item === \"4b\" && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: BlackOlivesTwo,\n            alt: \"black olives pizza\",\n            className: \"group-two category-card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 29\n          }, this)]\n        }, item, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this))]\n      }, grp.title, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        id: \"pizza\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"pizza\",\n          onClick: () => handleTryAgainClick(),\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"pizza\",\n          onClick: () => handleIsSolvedClick(),\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Situations1DnD, \"sEPioDSRfrlFPwaMRrm90mF6wo8=\");\n\n_c = Situations1DnD;\n\nvar _c;\n\n$RefreshReg$(_c, \"Situations1DnD\");","map":{"version":3,"sources":["/home/donnachin/Desktop/Git/Cloned/GroupProj/client/src/Components/Situations/Situations1/Situations1DnD.js"],"names":["React","useState","useRef","HawaiiOne","HawaiiTwo","VeggieOne","VeggieTwo","ShrimpOne","ShrimpTwo","BlackOlivesOne","BlackOlivesTwo","Situations1DnD","situationsData","list","setList","dragging","setDragging","dragItem","dragNode","handleDragStart","e","params","console","log","current","target","addEventListener","handleDragEnd","setTimeout","handleDragEnter","currentItem","grpI","oldList","newList","JSON","parse","stringify","items","splice","itemI","removeEventListener","getStyles","isSolved","firstHalfPizzaArray","secondHalfPizzaArray","match","matchingIndexes","i","length","push","handleIsSolvedClick","handleTryAgainClick","shuffledPieces","sort","Math","random","map","grp","title","item"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\"; //useRef it stays constant between re renders\nimport HawaiiOne from \"../SituationsImg/hawaii-1.jpg\";\nimport HawaiiTwo from \"../SituationsImg/hawaii-2.jpg\";\nimport VeggieOne from \"../SituationsImg/veggies-1.jpg\";\nimport VeggieTwo from \"../SituationsImg/veggies-2.jpg\";\nimport ShrimpOne from \"../SituationsImg/shrimp-1.jpg\";\nimport ShrimpTwo from \"../SituationsImg/shrimp-2.jpg\";\nimport BlackOlivesOne from \"../SituationsImg/olives-1.jpg\";\nimport BlackOlivesTwo from \"../SituationsImg/olives-2.jpg\";\nimport './Situations1.css'\n\nexport default function Situations1DnD ({ situationsData }) {\n\n    const [list, setList] = useState(situationsData);\n    const [dragging, setDragging] = useState(false);\n    const dragItem = useRef(); //useRef() stays constant between re renders\n    const dragNode = useRef();\n  \n    const handleDragStart = (e, params) => {\n      console.log(\"drag starting...\", params);\n      dragItem.current = params; //dragItem's coordinate\n      dragNode.current = e.target; //the node we are currently playing with\n      dragNode.current.addEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n      // when we start dragging it will keep the original style (white), otherwise it will drag black-ish\n      setTimeout(() => {\n        setDragging(true);\n      }, 0);\n    };\n  \n    const handleDragEnter = (e, params) => {\n      console.log(\"Entering drag ...\", params);\n      // const firstHalfPizzaArray = list[0].items;\n  \n      const currentItem = dragItem.current;\n      console.log(currentItem, dragNode);\n  \n      if (currentItem.grpI !== params.grpI) {\n        return;\n      }\n  \n      //if the coordinates of the current node are not the same as the current node is at the moment, fire the log\n      if (e.target !== dragNode.current) {\n        console.log(\"TARGET IS NOT THE SAME!\");\n  \n        setList((oldList) => {\n          let newList = JSON.parse(JSON.stringify(oldList)); // here we are making a clone of oldList (that is an object) so we can manipulated\n          newList[params.grpI].items.splice(\n            params.itemI,\n            0,\n            newList[currentItem.grpI].items.splice(currentItem.itemI, 1)[0]\n          );\n          dragItem.current = params;\n          return newList;\n        });\n      }\n      // when we start dragging it will keep the original style (white), otherwise it will drag black-ish\n      setTimeout(() => {\n        setDragging(true);\n      }, 0);\n    };\n  \n    const handleDragEnd = () => {\n      console.log(\"Ending drag...\");\n      setDragging(false);\n      dragNode.current.removeEventListener(\"dragend\", handleDragEnd); //The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).\n      dragItem.current = null;\n      dragNode.current = null;\n    };\n  \n    const getStyles = (params) => {\n      const currentItem = dragItem.current;\n      if (\n        currentItem.grpI === params.grpI &&\n        currentItem.itemI === params.itemI\n      ) {\n        return \"current dnd-item\";\n      }\n      return \"dnd-item\";\n    };\n  \n    const isSolved = () => {\n      const firstHalfPizzaArray = list[0].items;\n      const secondHalfPizzaArray = list[1].items;\n  \n      let match = true;\n      const matchingIndexes = [];\n  \n      for (let i = 0; i < firstHalfPizzaArray.length; i++) {\n        if (firstHalfPizzaArray[i][0] !== secondHalfPizzaArray[i][0]) {\n          match = false;\n        } else {\n          matchingIndexes.push(i);\n        }\n      }\n      console.log(`You've got ${matchingIndexes.length} out of 4 correct!`);\n    };\n  \n    const handleIsSolvedClick = () => {\n      isSolved();\n    };\n  \n    const handleTryAgainClick = () => {\n      const shuffledPieces = [...situationsData[1].items].sort(\n        () => 0.5 - Math.random()\n      );\n      setList([\n        situationsData[0],\n        { ...situationsData[1], items: shuffledPieces },\n      ]);\n    };\n\n\n    return (\n        <div className=\"SituationsDnD\">\n            <div className=\"situations-drag-n-drop\">\n                {/* here we iterate through groups*/}\n                {list.map((grp, grpI) => (\n                    <div\n                    key={grp.title}\n                    className=\"situations-dnd-group\"\n                    onDragEnter={\n                        dragging && !grp.items.length\n                        ? (e) => handleDragEnter(e, { grpI, itemI: 0 })\n                        : null\n                    }\n                    >\n                    <div className=\"group-title\">{grp.title}</div>\n                    {/* here we iterate through items*/}\n                    {grp.items.map((item, itemI) => (\n                        <div\n                            draggable\n                            onDragStart={(e) => {\n                                handleDragStart(e, { grpI, itemI }); //here we are passing the coordinates by index to a specific item\n                            }}\n                            onDragEnter={\n                                dragging ? (e) => handleDragEnter(e, { grpI, itemI }) : null\n                            }\n                            key={item}\n                            className={dragging ? getStyles({ grpI, itemI }) : \"dnd-item\"}\n                        >\n                                {item === \"1a\" && (\n                                    <img\n                                    src={HawaiiOne}\n                                    alt=\"hawaiian pizza\"\n                                    className=\" group-one category-card\"\n                                    />\n                        )}\n                        {item === \"2a\" && (\n                            <img\n                            src={VeggieOne}\n                            alt=\"veggie pizza\"\n                            className=\" group-one category-card\"\n                            />\n                        )}\n                        {item === \"3a\" && (\n                            <img\n                            src={ShrimpOne}\n                            alt=\"shrimp pizza\"\n                            className=\" group-one category-card\"\n                            />\n                        )}\n                        {item === \"4a\" && (\n                            <img\n                            src={BlackOlivesOne}\n                            alt=\"black olives pizza\"\n                            className=\"group-one category-card\"\n                            />\n                        )}\n                        {item === \"1b\" && (\n                            <img\n                            src={HawaiiTwo}\n                            alt=\"hawaiian pizza\"\n                            className=\"group-two category-card\"\n                            />\n                        )}\n                        {item === \"2b\" && (\n                            <img\n                            src={VeggieTwo}\n                            alt=\"veggie pizza\"\n                            className=\"group-two category-card\"\n                            />\n                        )}\n                        {item === \"3b\" && (\n                            <img\n                            src={ShrimpTwo}\n                            alt=\"shrimp pizza\"\n                            className=\"group-two category-card\"\n                            />\n                        )}\n                        {item === \"4b\" && (\n                            <img\n                            src={BlackOlivesTwo}\n                            alt=\"black olives pizza\"\n                            className=\"group-two category-card\"\n                            />\n                        )}\n                        </div>\n                    ))}\n                    </div>\n                ))}\n                <div className=\"buttons\" id=\"pizza\">\n                    <button id=\"pizza\" onClick={() => handleTryAgainClick()}>Try Again</button>\n                    <button id=\"pizza\" onClick={() => handleIsSolvedClick()}>Done</button>\n                </div>\n            </div>\n            \n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}